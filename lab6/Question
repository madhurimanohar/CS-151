Part 1 - Composite pattern
Review the code from Ch 4 for Icons at

https://bitbucket.org/cayhorstmann/oodp3code/src/master/ch04/

(folders icon 1 and icon2)

Use the COMPOSITE pattern to define a class CompositeIcon that implements the Icon interface type and contains a list of icons. 
Supply a method

void addIcon(Icon icon)

Draw the icons in a horizontal row.
 
Demonstrate the class by running

import javax.swing.*;

public class IconTester
{
   public static void main(String[] args)
   {
      Icon compositeIcon = new CompositeIcon();
      compositeIcon.addIcon(new MarsIcon(50));
      compositeIcon.addIcon(new ImageIcon("globe.gif"));
      JOptionPane.showMessageDialog(
            null, 
            "Hello, Composite!",
            "Message",
            JOptionPane.INFORMATION_MESSAGE,
            compositeIcon);
      System.exit(0);
   }
}

------------------------------------------------------------------

Part 2 - Decorator pattern

https://horstmann.com/sjsu/spring2019/cs151/day10/index.html#(8)

Implement a decorator BoxedIcon that draws a box outside an icon. 
Leave a ten pixel gap between the original icon and the lines that you draw around it.

import javax.swing.*;

public class IconTester
{
   public static void main(String[] args)
   {
      JOptionPane.showMessageDialog(
            null, 
            "Hello, Boxed Mars!",
            "Message",
            JOptionPane.INFORMATION_MESSAGE,
            new BoxedIcon(new MarsIcon(50)));
      System.exit(0);
   }
}
